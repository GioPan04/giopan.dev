---
export interface IEvents {
  [year: number]: string[]
} 

interface Props {
  events: IEvents
}

const events = Object.entries(Astro.props.events);
---

<div class="hidden md:grid grid-cols-timeline">
  {
    events.map(function (e, i) {
      const last = i == (events.length - 1);
      const [ year, event ]: [string, string[]] = e;

      const contents = (
        <div class:list={{'timeline-event': true, "pb-16": !last}}>
        { event.map(e => <p>{e}</p>) }
        </div>
      )

      return (
        <div class="text-right">{(i % 2) == 0 && contents}</div>
        <div class="flex flex-col items-center">
          <div class="bg-white text-black font-bold rounded-full w-16 h-16 text-lg px-3 py-[1.125rem]">
            {year}
          </div>
          <div class="w-0.5 h-full bg-white block"></div>
        </div>
        <div class="text-justify">{(i % 2) != 0 && contents}</div>
      );
    })
  }
</div>
<div class="md:hidden">
{
  events.map((e, i) => (
    <div class:list={{"mt-8": i != 0}}>
      <div class="mx-auto mb-2 bg-white text-black font-bold rounded-full w-16 h-16 text-lg px-3 py-[1.125rem]">
        {e[0]}
      </div>
      {
        e[1].map((content: string) => (
          <p class="text-justify">{content}</p>
        ))
      }
    </div>
  ))
}
</div>

<style>
  .timeline-hidden {
    opacity: 0;
    transform: translateY(30px);
  }
  .timeline-shown {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;

    opacity: 1;
    transform: translateY(0px);
  }
</style>

<script>
  
  const observerCallback: IntersectionObserverCallback = (entries, observer) => {
    entries.forEach((oe) => {
      if(!oe.target.classList.contains('timeline-shown') && oe.isIntersecting) {
        oe.target.classList.add('timeline-shown');
        observer.unobserve(oe.target);
      }
    });
    
  }
  
  const events = document.querySelectorAll<HTMLSpanElement>('.timeline-event');
  const observer = new IntersectionObserver(observerCallback, { rootMargin: '100px 0px 0px 0px' });

  events.forEach((e) => {
    e.classList.add('timeline-hidden');
    observer.observe(e);
  });
</script>